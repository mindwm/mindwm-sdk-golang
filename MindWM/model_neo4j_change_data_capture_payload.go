/*
Mindwm API

This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package MindWM

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// Neo4jChangeDataCapturePayload - struct for Neo4jChangeDataCapturePayload
type Neo4jChangeDataCapturePayload struct {
	Neo4jChangeDataCaptureNodePayload *Neo4jChangeDataCaptureNodePayload
	Neo4jChangeDataCaptureRelationshipPayload *Neo4jChangeDataCaptureRelationshipPayload
}

// Neo4jChangeDataCaptureNodePayloadAsNeo4jChangeDataCapturePayload is a convenience function that returns Neo4jChangeDataCaptureNodePayload wrapped in Neo4jChangeDataCapturePayload
func Neo4jChangeDataCaptureNodePayloadAsNeo4jChangeDataCapturePayload(v *Neo4jChangeDataCaptureNodePayload) Neo4jChangeDataCapturePayload {
	return Neo4jChangeDataCapturePayload{
		Neo4jChangeDataCaptureNodePayload: v,
	}
}

// Neo4jChangeDataCaptureRelationshipPayloadAsNeo4jChangeDataCapturePayload is a convenience function that returns Neo4jChangeDataCaptureRelationshipPayload wrapped in Neo4jChangeDataCapturePayload
func Neo4jChangeDataCaptureRelationshipPayloadAsNeo4jChangeDataCapturePayload(v *Neo4jChangeDataCaptureRelationshipPayload) Neo4jChangeDataCapturePayload {
	return Neo4jChangeDataCapturePayload{
		Neo4jChangeDataCaptureRelationshipPayload: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Neo4jChangeDataCapturePayload) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Neo4jChangeDataCaptureNodePayload
	err = newStrictDecoder(data).Decode(&dst.Neo4jChangeDataCaptureNodePayload)
	if err == nil {
		jsonNeo4jChangeDataCaptureNodePayload, _ := json.Marshal(dst.Neo4jChangeDataCaptureNodePayload)
		if string(jsonNeo4jChangeDataCaptureNodePayload) == "{}" { // empty struct
			dst.Neo4jChangeDataCaptureNodePayload = nil
		} else {
			if err = validator.Validate(dst.Neo4jChangeDataCaptureNodePayload); err != nil {
				dst.Neo4jChangeDataCaptureNodePayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.Neo4jChangeDataCaptureNodePayload = nil
	}

	// try to unmarshal data into Neo4jChangeDataCaptureRelationshipPayload
	err = newStrictDecoder(data).Decode(&dst.Neo4jChangeDataCaptureRelationshipPayload)
	if err == nil {
		jsonNeo4jChangeDataCaptureRelationshipPayload, _ := json.Marshal(dst.Neo4jChangeDataCaptureRelationshipPayload)
		if string(jsonNeo4jChangeDataCaptureRelationshipPayload) == "{}" { // empty struct
			dst.Neo4jChangeDataCaptureRelationshipPayload = nil
		} else {
			if err = validator.Validate(dst.Neo4jChangeDataCaptureRelationshipPayload); err != nil {
				dst.Neo4jChangeDataCaptureRelationshipPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.Neo4jChangeDataCaptureRelationshipPayload = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Neo4jChangeDataCaptureNodePayload = nil
		dst.Neo4jChangeDataCaptureRelationshipPayload = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Neo4jChangeDataCapturePayload)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Neo4jChangeDataCapturePayload)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Neo4jChangeDataCapturePayload) MarshalJSON() ([]byte, error) {
	if src.Neo4jChangeDataCaptureNodePayload != nil {
		return json.Marshal(&src.Neo4jChangeDataCaptureNodePayload)
	}

	if src.Neo4jChangeDataCaptureRelationshipPayload != nil {
		return json.Marshal(&src.Neo4jChangeDataCaptureRelationshipPayload)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Neo4jChangeDataCapturePayload) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Neo4jChangeDataCaptureNodePayload != nil {
		return obj.Neo4jChangeDataCaptureNodePayload
	}

	if obj.Neo4jChangeDataCaptureRelationshipPayload != nil {
		return obj.Neo4jChangeDataCaptureRelationshipPayload
	}

	// all schemas are nil
	return nil
}

type NullableNeo4jChangeDataCapturePayload struct {
	value *Neo4jChangeDataCapturePayload
	isSet bool
}

func (v NullableNeo4jChangeDataCapturePayload) Get() *Neo4jChangeDataCapturePayload {
	return v.value
}

func (v *NullableNeo4jChangeDataCapturePayload) Set(val *Neo4jChangeDataCapturePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableNeo4jChangeDataCapturePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableNeo4jChangeDataCapturePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNeo4jChangeDataCapturePayload(val *Neo4jChangeDataCapturePayload) *NullableNeo4jChangeDataCapturePayload {
	return &NullableNeo4jChangeDataCapturePayload{value: val, isSet: true}
}

func (v NullableNeo4jChangeDataCapturePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNeo4jChangeDataCapturePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


