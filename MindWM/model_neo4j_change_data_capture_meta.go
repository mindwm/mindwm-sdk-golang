/*
Mindwm API

This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package MindWM

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Neo4jChangeDataCaptureMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Neo4jChangeDataCaptureMeta{}

// Neo4jChangeDataCaptureMeta struct for Neo4jChangeDataCaptureMeta
type Neo4jChangeDataCaptureMeta struct {
	Operation string `json:"operation"`
	Source Neo4jChangeDataCaptureMetaSource `json:"source"`
	Timestamp int32 `json:"timestamp"`
	TxEventId int32 `json:"txEventId"`
	TxEventsCount int32 `json:"txEventsCount"`
	TxId int32 `json:"txId"`
	Username string `json:"username"`
}

type _Neo4jChangeDataCaptureMeta Neo4jChangeDataCaptureMeta

// NewNeo4jChangeDataCaptureMeta instantiates a new Neo4jChangeDataCaptureMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNeo4jChangeDataCaptureMeta(operation string, source Neo4jChangeDataCaptureMetaSource, timestamp int32, txEventId int32, txEventsCount int32, txId int32, username string) *Neo4jChangeDataCaptureMeta {
	this := Neo4jChangeDataCaptureMeta{}
	this.Operation = operation
	this.Source = source
	this.Timestamp = timestamp
	this.TxEventId = txEventId
	this.TxEventsCount = txEventsCount
	this.TxId = txId
	this.Username = username
	return &this
}

// NewNeo4jChangeDataCaptureMetaWithDefaults instantiates a new Neo4jChangeDataCaptureMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNeo4jChangeDataCaptureMetaWithDefaults() *Neo4jChangeDataCaptureMeta {
	this := Neo4jChangeDataCaptureMeta{}
	return &this
}

// GetOperation returns the Operation field value
func (o *Neo4jChangeDataCaptureMeta) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *Neo4jChangeDataCaptureMeta) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *Neo4jChangeDataCaptureMeta) SetOperation(v string) {
	o.Operation = v
}

// GetSource returns the Source field value
func (o *Neo4jChangeDataCaptureMeta) GetSource() Neo4jChangeDataCaptureMetaSource {
	if o == nil {
		var ret Neo4jChangeDataCaptureMetaSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *Neo4jChangeDataCaptureMeta) GetSourceOk() (*Neo4jChangeDataCaptureMetaSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *Neo4jChangeDataCaptureMeta) SetSource(v Neo4jChangeDataCaptureMetaSource) {
	o.Source = v
}

// GetTimestamp returns the Timestamp field value
func (o *Neo4jChangeDataCaptureMeta) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Neo4jChangeDataCaptureMeta) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Neo4jChangeDataCaptureMeta) SetTimestamp(v int32) {
	o.Timestamp = v
}

// GetTxEventId returns the TxEventId field value
func (o *Neo4jChangeDataCaptureMeta) GetTxEventId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TxEventId
}

// GetTxEventIdOk returns a tuple with the TxEventId field value
// and a boolean to check if the value has been set.
func (o *Neo4jChangeDataCaptureMeta) GetTxEventIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxEventId, true
}

// SetTxEventId sets field value
func (o *Neo4jChangeDataCaptureMeta) SetTxEventId(v int32) {
	o.TxEventId = v
}

// GetTxEventsCount returns the TxEventsCount field value
func (o *Neo4jChangeDataCaptureMeta) GetTxEventsCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TxEventsCount
}

// GetTxEventsCountOk returns a tuple with the TxEventsCount field value
// and a boolean to check if the value has been set.
func (o *Neo4jChangeDataCaptureMeta) GetTxEventsCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxEventsCount, true
}

// SetTxEventsCount sets field value
func (o *Neo4jChangeDataCaptureMeta) SetTxEventsCount(v int32) {
	o.TxEventsCount = v
}

// GetTxId returns the TxId field value
func (o *Neo4jChangeDataCaptureMeta) GetTxId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TxId
}

// GetTxIdOk returns a tuple with the TxId field value
// and a boolean to check if the value has been set.
func (o *Neo4jChangeDataCaptureMeta) GetTxIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxId, true
}

// SetTxId sets field value
func (o *Neo4jChangeDataCaptureMeta) SetTxId(v int32) {
	o.TxId = v
}

// GetUsername returns the Username field value
func (o *Neo4jChangeDataCaptureMeta) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *Neo4jChangeDataCaptureMeta) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *Neo4jChangeDataCaptureMeta) SetUsername(v string) {
	o.Username = v
}

func (o Neo4jChangeDataCaptureMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Neo4jChangeDataCaptureMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operation"] = o.Operation
	toSerialize["source"] = o.Source
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["txEventId"] = o.TxEventId
	toSerialize["txEventsCount"] = o.TxEventsCount
	toSerialize["txId"] = o.TxId
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *Neo4jChangeDataCaptureMeta) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operation",
		"source",
		"timestamp",
		"txEventId",
		"txEventsCount",
		"txId",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNeo4jChangeDataCaptureMeta := _Neo4jChangeDataCaptureMeta{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNeo4jChangeDataCaptureMeta)

	if err != nil {
		return err
	}

	*o = Neo4jChangeDataCaptureMeta(varNeo4jChangeDataCaptureMeta)

	return err
}

type NullableNeo4jChangeDataCaptureMeta struct {
	value *Neo4jChangeDataCaptureMeta
	isSet bool
}

func (v NullableNeo4jChangeDataCaptureMeta) Get() *Neo4jChangeDataCaptureMeta {
	return v.value
}

func (v *NullableNeo4jChangeDataCaptureMeta) Set(val *Neo4jChangeDataCaptureMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableNeo4jChangeDataCaptureMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableNeo4jChangeDataCaptureMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNeo4jChangeDataCaptureMeta(val *Neo4jChangeDataCaptureMeta) *NullableNeo4jChangeDataCaptureMeta {
	return &NullableNeo4jChangeDataCaptureMeta{value: val, isSet: true}
}

func (v NullableNeo4jChangeDataCaptureMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNeo4jChangeDataCaptureMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


