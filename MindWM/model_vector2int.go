/*
Mindwm API

This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package MindWM

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Vector2int type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Vector2int{}

// Vector2int struct for Vector2int
type Vector2int struct {
	// the X coordinate
	X float32 `json:"x"`
	// the Y coordinate
	Y float32 `json:"y"`
}

type _Vector2int Vector2int

// NewVector2int instantiates a new Vector2int object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVector2int(x float32, y float32) *Vector2int {
	this := Vector2int{}
	this.X = x
	this.Y = y
	return &this
}

// NewVector2intWithDefaults instantiates a new Vector2int object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVector2intWithDefaults() *Vector2int {
	this := Vector2int{}
	return &this
}

// GetX returns the X field value
func (o *Vector2int) GetX() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.X
}

// GetXOk returns a tuple with the X field value
// and a boolean to check if the value has been set.
func (o *Vector2int) GetXOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X, true
}

// SetX sets field value
func (o *Vector2int) SetX(v float32) {
	o.X = v
}

// GetY returns the Y field value
func (o *Vector2int) GetY() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *Vector2int) GetYOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *Vector2int) SetY(v float32) {
	o.Y = v
}

func (o Vector2int) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Vector2int) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["x"] = o.X
	toSerialize["y"] = o.Y
	return toSerialize, nil
}

func (o *Vector2int) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"x",
		"y",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVector2int := _Vector2int{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVector2int)

	if err != nil {
		return err
	}

	*o = Vector2int(varVector2int)

	return err
}

type NullableVector2int struct {
	value *Vector2int
	isSet bool
}

func (v NullableVector2int) Get() *Vector2int {
	return v.value
}

func (v *NullableVector2int) Set(val *Vector2int) {
	v.value = val
	v.isSet = true
}

func (v NullableVector2int) IsSet() bool {
	return v.isSet
}

func (v *NullableVector2int) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVector2int(val *Vector2int) *NullableVector2int {
	return &NullableVector2int{value: val, isSet: true}
}

func (v NullableVector2int) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVector2int) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


