/*
Mindwm API

This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package MindWM

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClipboardContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClipboardContext{}

// ClipboardContext struct for ClipboardContext
type ClipboardContext struct {
	// Xorg window_id
	WindowId float32 `json:"windowId"`
}

type _ClipboardContext ClipboardContext

// NewClipboardContext instantiates a new ClipboardContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClipboardContext(windowId float32) *ClipboardContext {
	this := ClipboardContext{}
	this.WindowId = windowId
	return &this
}

// NewClipboardContextWithDefaults instantiates a new ClipboardContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClipboardContextWithDefaults() *ClipboardContext {
	this := ClipboardContext{}
	return &this
}

// GetWindowId returns the WindowId field value
func (o *ClipboardContext) GetWindowId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.WindowId
}

// GetWindowIdOk returns a tuple with the WindowId field value
// and a boolean to check if the value has been set.
func (o *ClipboardContext) GetWindowIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WindowId, true
}

// SetWindowId sets field value
func (o *ClipboardContext) SetWindowId(v float32) {
	o.WindowId = v
}

func (o ClipboardContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClipboardContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["windowId"] = o.WindowId
	return toSerialize, nil
}

func (o *ClipboardContext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"windowId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClipboardContext := _ClipboardContext{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClipboardContext)

	if err != nil {
		return err
	}

	*o = ClipboardContext(varClipboardContext)

	return err
}

type NullableClipboardContext struct {
	value *ClipboardContext
	isSet bool
}

func (v NullableClipboardContext) Get() *ClipboardContext {
	return v.value
}

func (v *NullableClipboardContext) Set(val *ClipboardContext) {
	v.value = val
	v.isSet = true
}

func (v NullableClipboardContext) IsSet() bool {
	return v.isSet
}

func (v *NullableClipboardContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClipboardContext(val *ClipboardContext) *NullableClipboardContext {
	return &NullableClipboardContext{value: val, isSet: true}
}

func (v NullableClipboardContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClipboardContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


