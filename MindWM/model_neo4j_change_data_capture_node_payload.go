/*
Mindwm API

This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package MindWM

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Neo4jChangeDataCaptureNodePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Neo4jChangeDataCaptureNodePayload{}

// Neo4jChangeDataCaptureNodePayload struct for Neo4jChangeDataCaptureNodePayload
type Neo4jChangeDataCaptureNodePayload struct {
	After Neo4jChangeDataCaptureNodePayloadAfter `json:"after"`
	Before string `json:"before"`
	Id string `json:"id"`
	Type string `json:"type"`
}

type _Neo4jChangeDataCaptureNodePayload Neo4jChangeDataCaptureNodePayload

// NewNeo4jChangeDataCaptureNodePayload instantiates a new Neo4jChangeDataCaptureNodePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNeo4jChangeDataCaptureNodePayload(after Neo4jChangeDataCaptureNodePayloadAfter, before string, id string, type_ string) *Neo4jChangeDataCaptureNodePayload {
	this := Neo4jChangeDataCaptureNodePayload{}
	this.After = after
	this.Before = before
	this.Id = id
	this.Type = type_
	return &this
}

// NewNeo4jChangeDataCaptureNodePayloadWithDefaults instantiates a new Neo4jChangeDataCaptureNodePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNeo4jChangeDataCaptureNodePayloadWithDefaults() *Neo4jChangeDataCaptureNodePayload {
	this := Neo4jChangeDataCaptureNodePayload{}
	return &this
}

// GetAfter returns the After field value
func (o *Neo4jChangeDataCaptureNodePayload) GetAfter() Neo4jChangeDataCaptureNodePayloadAfter {
	if o == nil {
		var ret Neo4jChangeDataCaptureNodePayloadAfter
		return ret
	}

	return o.After
}

// GetAfterOk returns a tuple with the After field value
// and a boolean to check if the value has been set.
func (o *Neo4jChangeDataCaptureNodePayload) GetAfterOk() (*Neo4jChangeDataCaptureNodePayloadAfter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.After, true
}

// SetAfter sets field value
func (o *Neo4jChangeDataCaptureNodePayload) SetAfter(v Neo4jChangeDataCaptureNodePayloadAfter) {
	o.After = v
}

// GetBefore returns the Before field value
func (o *Neo4jChangeDataCaptureNodePayload) GetBefore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Before
}

// GetBeforeOk returns a tuple with the Before field value
// and a boolean to check if the value has been set.
func (o *Neo4jChangeDataCaptureNodePayload) GetBeforeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Before, true
}

// SetBefore sets field value
func (o *Neo4jChangeDataCaptureNodePayload) SetBefore(v string) {
	o.Before = v
}

// GetId returns the Id field value
func (o *Neo4jChangeDataCaptureNodePayload) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Neo4jChangeDataCaptureNodePayload) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Neo4jChangeDataCaptureNodePayload) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *Neo4jChangeDataCaptureNodePayload) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Neo4jChangeDataCaptureNodePayload) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Neo4jChangeDataCaptureNodePayload) SetType(v string) {
	o.Type = v
}

func (o Neo4jChangeDataCaptureNodePayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Neo4jChangeDataCaptureNodePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["after"] = o.After
	toSerialize["before"] = o.Before
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *Neo4jChangeDataCaptureNodePayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"after",
		"before",
		"id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNeo4jChangeDataCaptureNodePayload := _Neo4jChangeDataCaptureNodePayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNeo4jChangeDataCaptureNodePayload)

	if err != nil {
		return err
	}

	*o = Neo4jChangeDataCaptureNodePayload(varNeo4jChangeDataCaptureNodePayload)

	return err
}

type NullableNeo4jChangeDataCaptureNodePayload struct {
	value *Neo4jChangeDataCaptureNodePayload
	isSet bool
}

func (v NullableNeo4jChangeDataCaptureNodePayload) Get() *Neo4jChangeDataCaptureNodePayload {
	return v.value
}

func (v *NullableNeo4jChangeDataCaptureNodePayload) Set(val *Neo4jChangeDataCaptureNodePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableNeo4jChangeDataCaptureNodePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableNeo4jChangeDataCaptureNodePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNeo4jChangeDataCaptureNodePayload(val *Neo4jChangeDataCaptureNodePayload) *NullableNeo4jChangeDataCaptureNodePayload {
	return &NullableNeo4jChangeDataCaptureNodePayload{value: val, isSet: true}
}

func (v NullableNeo4jChangeDataCaptureNodePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNeo4jChangeDataCaptureNodePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


