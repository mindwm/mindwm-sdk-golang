/*
Mindwm API

This document describes the documentation, a collection of JSON schemas and example cloudevent and payloads

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package MindWM

import (
	"encoding/json"
	"fmt"
)

// checks if the Clipboard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Clipboard{}

// Clipboard struct for Clipboard
type Clipboard struct {
	Context ClipboardContext `json:"context"`
	// Type of clipboard
	ClipboardType string `json:"clipboardType"`
	// Clipboard content
	Content string `json:"content"`
	SelectionStart *Vector2int `json:"selectionStart,omitempty"`
	SelectionEnd *Vector2int `json:"selectionEnd,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Clipboard Clipboard

// NewClipboard instantiates a new Clipboard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClipboard(context ClipboardContext, clipboardType string, content string) *Clipboard {
	this := Clipboard{}
	this.Context = context
	this.ClipboardType = clipboardType
	this.Content = content
	return &this
}

// NewClipboardWithDefaults instantiates a new Clipboard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClipboardWithDefaults() *Clipboard {
	this := Clipboard{}
	return &this
}

// GetContext returns the Context field value
func (o *Clipboard) GetContext() ClipboardContext {
	if o == nil {
		var ret ClipboardContext
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *Clipboard) GetContextOk() (*ClipboardContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *Clipboard) SetContext(v ClipboardContext) {
	o.Context = v
}

// GetClipboardType returns the ClipboardType field value
func (o *Clipboard) GetClipboardType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClipboardType
}

// GetClipboardTypeOk returns a tuple with the ClipboardType field value
// and a boolean to check if the value has been set.
func (o *Clipboard) GetClipboardTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClipboardType, true
}

// SetClipboardType sets field value
func (o *Clipboard) SetClipboardType(v string) {
	o.ClipboardType = v
}

// GetContent returns the Content field value
func (o *Clipboard) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *Clipboard) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *Clipboard) SetContent(v string) {
	o.Content = v
}

// GetSelectionStart returns the SelectionStart field value if set, zero value otherwise.
func (o *Clipboard) GetSelectionStart() Vector2int {
	if o == nil || IsNil(o.SelectionStart) {
		var ret Vector2int
		return ret
	}
	return *o.SelectionStart
}

// GetSelectionStartOk returns a tuple with the SelectionStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clipboard) GetSelectionStartOk() (*Vector2int, bool) {
	if o == nil || IsNil(o.SelectionStart) {
		return nil, false
	}
	return o.SelectionStart, true
}

// HasSelectionStart returns a boolean if a field has been set.
func (o *Clipboard) HasSelectionStart() bool {
	if o != nil && !IsNil(o.SelectionStart) {
		return true
	}

	return false
}

// SetSelectionStart gets a reference to the given Vector2int and assigns it to the SelectionStart field.
func (o *Clipboard) SetSelectionStart(v Vector2int) {
	o.SelectionStart = &v
}

// GetSelectionEnd returns the SelectionEnd field value if set, zero value otherwise.
func (o *Clipboard) GetSelectionEnd() Vector2int {
	if o == nil || IsNil(o.SelectionEnd) {
		var ret Vector2int
		return ret
	}
	return *o.SelectionEnd
}

// GetSelectionEndOk returns a tuple with the SelectionEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Clipboard) GetSelectionEndOk() (*Vector2int, bool) {
	if o == nil || IsNil(o.SelectionEnd) {
		return nil, false
	}
	return o.SelectionEnd, true
}

// HasSelectionEnd returns a boolean if a field has been set.
func (o *Clipboard) HasSelectionEnd() bool {
	if o != nil && !IsNil(o.SelectionEnd) {
		return true
	}

	return false
}

// SetSelectionEnd gets a reference to the given Vector2int and assigns it to the SelectionEnd field.
func (o *Clipboard) SetSelectionEnd(v Vector2int) {
	o.SelectionEnd = &v
}

func (o Clipboard) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Clipboard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["context"] = o.Context
	toSerialize["clipboardType"] = o.ClipboardType
	toSerialize["content"] = o.Content
	if !IsNil(o.SelectionStart) {
		toSerialize["selectionStart"] = o.SelectionStart
	}
	if !IsNil(o.SelectionEnd) {
		toSerialize["selectionEnd"] = o.SelectionEnd
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Clipboard) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"context",
		"clipboardType",
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClipboard := _Clipboard{}

	err = json.Unmarshal(data, &varClipboard)

	if err != nil {
		return err
	}

	*o = Clipboard(varClipboard)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "context")
		delete(additionalProperties, "clipboardType")
		delete(additionalProperties, "content")
		delete(additionalProperties, "selectionStart")
		delete(additionalProperties, "selectionEnd")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClipboard struct {
	value *Clipboard
	isSet bool
}

func (v NullableClipboard) Get() *Clipboard {
	return v.value
}

func (v *NullableClipboard) Set(val *Clipboard) {
	v.value = val
	v.isSet = true
}

func (v NullableClipboard) IsSet() bool {
	return v.isSet
}

func (v *NullableClipboard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClipboard(val *Clipboard) *NullableClipboard {
	return &NullableClipboard{value: val, isSet: true}
}

func (v NullableClipboard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClipboard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


